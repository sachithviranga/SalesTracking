using AutoMapper;using Microsoft.EntityFrameworkCore;
using SalesTracking.Contracts.Repositories;using SalesTracking.DataContext;using SalesTracking.Entities.Customer;using SalesTracking.Entities.User;
using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace SalesTracking.Data.Repositories{    public class CustomerDataRepository : ICustomerDataRepository    {        private readonly DatabaseContext _context;        private readonly IMapper _mapper;        public CustomerDataRepository(DatabaseContext context, IMapper mapper)        {            _context = context;            _mapper = mapper;        }        public List<CustomerDTO> GetCustomers()        {            try            {                var customers = _context.Customer.Where(a => a.IsActive == true)                     .Include(i => i.CustomerType).ToList();                return _mapper.Map<List<CustomerDTO>>(customers);            }            catch            {                throw;            }        }        public int AddCustomer(CustomerDTO customer)        {            try            {                var saveObj = _mapper.Map<Customer>(customer);                _context.Customer.Add(saveObj);                _context.SaveChanges();                return saveObj.Id;            }            catch            {                throw;            }        }        public CustomerDTO UpdateCustomer(CustomerDTO customer)        {            try            {                var updateObj = _context.Customer.FirstOrDefault(a => a.Id == customer.Id);                if (updateObj != null)                {                    updateObj.Name = customer.Name;                    updateObj.Address = customer.Address;                    updateObj.PhoneNo = customer.PhoneNo;                    updateObj.CustomerTypeId = customer.CustomerTypeId;                    updateObj.IsActive = customer.IsActive;                    updateObj.UpdateBy = customer.UpdateBy;                    updateObj.UpdateDate = customer.UpdateDate;                    _context.SaveChanges();                }                return _mapper.Map<CustomerDTO>(updateObj);            }            catch            {                throw;            }        }

        public CustomerDTO GetCustomerById(int id)        {            try            {                var customerid = _context.Customer.Where(a => a.Id == id)
                     .SingleOrDefault();

                return _mapper.Map<CustomerDTO>(customerid);            }            catch (Exception)            {                throw;            }        }    }}